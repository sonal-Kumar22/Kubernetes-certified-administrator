HELM Introduction:

HELM:
- its a kubernetes based package installer
- best way to find , share and use software build for kubernetes
- helps user to maintain application
- helm is managed by CNCF - Cloud Native Computing Fiundation
- helm manages kubernetes charts which are preconfigured packages of kubernetes resources
- it enabled you to easily install packages , install revisions, and even rollback complex changes

Why we need helm:
- helm lets you deploy, fetch and manage application lifecycle both 3rd party products and your own
- with helm, there is a structure and convention for a software package that defines a layer of YAML templates and another layer that changes the templates 
  called values.
- Values are injected into templates thus allowing a separation of configuration and defines where chages are allowed
- this whole package is called helm chart
- essentially you create strucutred application packages that contain everything they need to run a kubernetes cluster including dependencies the 
  application requires.

HEML CLI or Tiller
- Helm is a CLI tool that interacts with its backend server called tiller
- tiller is installed by sending the command helm-init and lives in the kube-system namespace
- when a chart is installed tiller creates a 'release' and starts tracking it for changes.
- this way helm not only takes part in installation but is an actual deploy tool that manages lifecycle of applications in a cluster using chart release 
  and their revisions.
  
Helm Charts or packages
- helm uses charts to pack all the required k8s components for an application to deploy, run and scale
- helm chart is simply a collection of YAML template files organized into a specific directory structure
- chart is also where dependencies are defined and configurations are updated and maintained
- a chart root has to have only one file named Chart.yaml by convention
- templates are an optional subdirectory in a chart that combines the k8s components of it ex: services, replicasets , deployments etc
- Values are described in the values.yaml file which is a YAML structure holding values to match the template
- values basically define the deployment values line name, labels
- subcharts also named dependencies, are required charts for the current one
- another way of using subcharts is considering it as an inheritance mechanism which allows fetching a standart chart with templates and used it as a
  subcharts in multiple parent charts that would provide the values

Helm concepts|repository
- Repositories are where helm charts are held and maintained
- sometimes hel packed repositories as a .tar.gz file

Helm Concepts|release
- Release is a mechanism to track installed applications on a k8s cluster; when an application is installed by helm a release is being created.
- release can be tracked with helm ls; each would have a revision which is helm release versioning terminology; if a specific release is updated ex: 
  adding more memory to a redis release, the revision will be incremented
- helm allows rolling back to a particular revision, making it virtually the manager for deployments and production status handler.

What is Helm in Kubernetes? Helm and Helm Charts explained | Kubernetes Tutorial 23
link: https://www.youtube.com/watch?v=-ykwb1d0DXU

